@page "/register"
@using MudBlazor
@inject HttpClient Http
@inject NavigationManager Navigation


<MudGrid Justify="Justify.Center" Class="center-grid" Style="align-items: center;">
    <MudItem xs="12" sm="8" md="6" lg="6">
        <MudPaper Elevation="2" Class="pa-10">
            <MudText Typo="Typo.h5" Class="mud-text-center mb-4">Register</MudText>
            <MudForm Model="registerModel" >
                <MudTextField Label="Username" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"
                    @bind-Value="registerModel.Username"></MudTextField>
                <br />
                <MudTextField Label="Email" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"
                    @bind-Value="registerModel.Email"></MudTextField>
                <br />
                <MudTextField Label="Password" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"
                    @bind-Value="registerModel.Password" InputType="@PasswordInput" Adornment="Adornment.End"
                    AdornmentIcon="@PasswordInputIcon" OnAdornmentClick="ButtonTestclick">
                </MudTextField>
                <br>
                <MudTextField Label="Phone" Variant="Variant.Outlined" Margin="Margin.Dense" Required="true"
                    @bind-Value="registerModel.Phone"></MudTextField>
                <br />
                <MudButton Variant="Variant.Filled" Color="Color.Success" OnClick="@(() => HandleRegister())" type="Submit"
                    Disabled="isLoading" FullWidth="true">
                    @if (isLoading)
                    {
                        <MudProgressCircular Size="Size.Small" Color="Color.Secondary" />
                    }
                    else
                    {
                        <span>Register</span>
                    }
                </MudButton>
            </MudForm>
            @if (!string.IsNullOrEmpty(errorMessage))
            {
                <MudAlert Severity="Severity.Error" Class="mt-4" Visible="@( !string.IsNullOrEmpty(errorMessage) )">
                    @errorMessage
                </MudAlert>
            }
        </MudPaper>
    </MudItem>
</MudGrid>

@code {
    private RegisterModel registerModel = new();
    private bool isLoading = false;
    private string? successMessage = null;
    private string? errorMessage = null;

    bool isShow;
    InputType PasswordInput = InputType.Password;
    string PasswordInputIcon = Icons.Material.Filled.VisibilityOff;

    void ButtonTestclick()
    {
        @if (isShow)
        {
            isShow = false;
            PasswordInputIcon = Icons.Material.Filled.VisibilityOff;
            PasswordInput = InputType.Password;
        }
        else
        {
            isShow = true;
            PasswordInputIcon = Icons.Material.Filled.Visibility;
            PasswordInput = InputType.Text;
        }
    }

    private string SuccessMessageStyle => string.IsNullOrEmpty(successMessage) ? "display: none;" : "display: block;";
    private string ErrorMessageStyle => string.IsNullOrEmpty(errorMessage) ? "display: none;" : "display: block;";

    private async Task HandleRegister()
    {
        isLoading = true;
        errorMessage = null;
        successMessage = null;

        var response = await Http.PostAsJsonAsync("http://localhost:5029/api/auth/register", registerModel);

        if (response.IsSuccessStatusCode)
        {
            successMessage = "Registration successful! Please log in.";
			Navigation.NavigateTo("/login");
        }
        else
        {
            errorMessage = "Registration failed.";
        }

        isLoading = false;
    }

    public class RegisterModel
    {
        public string Username { get; set; } = string.Empty;
        public string Password { get; set; } = string.Empty;
        public string Email {get;set;} = string.Empty;
        public string Phone {get;set;} = string.Empty;

    }
}
